import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface BarcodeScannerOptions {
    /**
     * Prefer front camera. Supported on iOS and Android.
     */
    preferFrontCamera?: boolean;
    /**
     * Show flip camera button. Supported on iOS and Android.
     */
    showFlipCameraButton?: boolean;
    /**
     * Show torch button. Supported on iOS and Android.
     */
    showTorchButton?: boolean;
    /**
     * Disable animations. Supported on iOS only.
     */
    disableAnimations?: boolean;
    /**
     * Disable success beep. Supported on iOS only.
     */
    disableSuccessBeep?: boolean;
    /**
     * Prompt text. Supported on Android only.
     */
    prompt?: string;
    /**
     * Formats separated by commas. Defaults to all formats except `PDF_417` and `RSS_EXPANDED`.
     */
    formats?: string;
    /**
     * Orientation. Supported on Android only. Can be set to `portrait` or `landscape`. Defaults to none so the user can rotate the phone and pick an orientation.
     */
    orientation?: string;
    /**
     * Launch with the torch switched on (if available). Supported on Android only.
     */
    torchOn?: boolean;
    /**
     * Save scan history. Defaults to `false`. Supported on Android only.
     */
    saveHistory?: boolean;
    /**
     * Display scanned text for X ms. 0 suppresses it entirely, default 1500. Supported on Android only.
     */
    resultDisplayDuration?: number;
}
export interface BarcodeScanResult {
    format: 'QR_CODE' | 'DATA_MATRIX' | 'UPC_E' | 'UPC_A' | 'EAN_8' | 'EAN_13' | 'CODE_128' | 'CODE_39' | 'CODE_93' | 'CODABAR' | 'ITF' | 'RSS14' | 'RSS_EXPANDED' | 'PDF_417' | 'AZTEC' | 'MSI';
    cancelled: boolean;
    text: string;
}
/**
 * @name Barcode Scanner
 * @description
 * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.
 *
 * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).
 *
 * @usage
 * ```typescript
 * import { BarcodeScanner } from '@ionic-native/barcode-scanner/ngx';
 *
 * constructor(private barcodeScanner: BarcodeScanner) { }
 *
 * ...
 *
 *
 * this.barcodeScanner.scan().then(barcodeData => {
 *  console.log('Barcode data', barcodeData);
 * }).catch(err => {
 * 	console.log('Error', err);
 * });
 * ```
 * @interfaces
 * BarcodeScannerOptions
 * BarcodeScanResult
 */
export declare class BarcodeScanner extends IonicNativePlugin {
    Encode: {
        TEXT_TYPE: string;
        EMAIL_TYPE: string;
        PHONE_TYPE: string;
        SMS_TYPE: string;
    };
    /**
     * Open the barcode scanner.
     * @param {BarcodeScannerOptions} [options] Optional options to pass to the scanner
     * @returns {Promise<any>} Returns a Promise that resolves with scanner data, or rejects with an error.
     */
    scan(options?: BarcodeScannerOptions): Promise<BarcodeScanResult>;
    /**
     * Encodes data into a barcode.
     * NOTE: not well supported on Android
     * @param {string} type Type of encoding
     * @param {any} data Data to encode
     * @returns {Promise<any>}
     */
    encode(type: string, data: any): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarcodeScanner, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BarcodeScanner>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgQmFyY29kZVNjYW5uZXJPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBQcmVmZXIgZnJvbnQgY2FtZXJhLiBTdXBwb3J0ZWQgb24gaU9TIGFuZCBBbmRyb2lkLlxuICAgICAqL1xuICAgIHByZWZlckZyb250Q2FtZXJhPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTaG93IGZsaXAgY2FtZXJhIGJ1dHRvbi4gU3VwcG9ydGVkIG9uIGlPUyBhbmQgQW5kcm9pZC5cbiAgICAgKi9cbiAgICBzaG93RmxpcENhbWVyYUJ1dHRvbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2hvdyB0b3JjaCBidXR0b24uIFN1cHBvcnRlZCBvbiBpT1MgYW5kIEFuZHJvaWQuXG4gICAgICovXG4gICAgc2hvd1RvcmNoQnV0dG9uPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGFuaW1hdGlvbnMuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cbiAgICAgKi9cbiAgICBkaXNhYmxlQW5pbWF0aW9ucz86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBzdWNjZXNzIGJlZXAuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cbiAgICAgKi9cbiAgICBkaXNhYmxlU3VjY2Vzc0JlZXA/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFByb21wdCB0ZXh0LiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxuICAgICAqL1xuICAgIHByb21wdD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGb3JtYXRzIHNlcGFyYXRlZCBieSBjb21tYXMuIERlZmF1bHRzIHRvIGFsbCBmb3JtYXRzIGV4Y2VwdCBgUERGXzQxN2AgYW5kIGBSU1NfRVhQQU5ERURgLlxuICAgICAqL1xuICAgIGZvcm1hdHM/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogT3JpZW50YXRpb24uIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuIENhbiBiZSBzZXQgdG8gYHBvcnRyYWl0YCBvciBgbGFuZHNjYXBlYC4gRGVmYXVsdHMgdG8gbm9uZSBzbyB0aGUgdXNlciBjYW4gcm90YXRlIHRoZSBwaG9uZSBhbmQgcGljayBhbiBvcmllbnRhdGlvbi5cbiAgICAgKi9cbiAgICBvcmllbnRhdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBMYXVuY2ggd2l0aCB0aGUgdG9yY2ggc3dpdGNoZWQgb24gKGlmIGF2YWlsYWJsZSkuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXG4gICAgICovXG4gICAgdG9yY2hPbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2F2ZSBzY2FuIGhpc3RvcnkuIERlZmF1bHRzIHRvIGBmYWxzZWAuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXG4gICAgICovXG4gICAgc2F2ZUhpc3Rvcnk/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERpc3BsYXkgc2Nhbm5lZCB0ZXh0IGZvciBYIG1zLiAwIHN1cHByZXNzZXMgaXQgZW50aXJlbHksIGRlZmF1bHQgMTUwMC4gU3VwcG9ydGVkIG9uIEFuZHJvaWQgb25seS5cbiAgICAgKi9cbiAgICByZXN1bHREaXNwbGF5RHVyYXRpb24/OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJhcmNvZGVTY2FuUmVzdWx0IHtcbiAgICBmb3JtYXQ6ICdRUl9DT0RFJyB8ICdEQVRBX01BVFJJWCcgfCAnVVBDX0UnIHwgJ1VQQ19BJyB8ICdFQU5fOCcgfCAnRUFOXzEzJyB8ICdDT0RFXzEyOCcgfCAnQ09ERV8zOScgfCAnQ09ERV85MycgfCAnQ09EQUJBUicgfCAnSVRGJyB8ICdSU1MxNCcgfCAnUlNTX0VYUEFOREVEJyB8ICdQREZfNDE3JyB8ICdBWlRFQycgfCAnTVNJJztcbiAgICBjYW5jZWxsZWQ6IGJvb2xlYW47XG4gICAgdGV4dDogc3RyaW5nO1xufVxuLyoqXG4gKiBAbmFtZSBCYXJjb2RlIFNjYW5uZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEJhcmNvZGUgU2Nhbm5lciBQbHVnaW4gb3BlbnMgYSBjYW1lcmEgdmlldyBhbmQgYXV0b21hdGljYWxseSBzY2FucyBhIGJhcmNvZGUsIHJldHVybmluZyB0aGUgZGF0YSBiYWNrIHRvIHlvdS5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYHBob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtCYXJjb2RlU2Nhbm5lciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1iYXJjb2Rlc2Nhbm5lcikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXJjb2RlU2Nhbm5lciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFyY29kZS1zY2FubmVyL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYXJjb2RlU2Nhbm5lcjogQmFyY29kZVNjYW5uZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmJhcmNvZGVTY2FubmVyLnNjYW4oKS50aGVuKGJhcmNvZGVEYXRhID0+IHtcbiAqICBjb25zb2xlLmxvZygnQmFyY29kZSBkYXRhJywgYmFyY29kZURhdGEpO1xuICogfSkuY2F0Y2goZXJyID0+IHtcbiAqIFx0Y29uc29sZS5sb2coJ0Vycm9yJywgZXJyKTtcbiAqIH0pO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQmFyY29kZVNjYW5uZXJPcHRpb25zXG4gKiBCYXJjb2RlU2NhblJlc3VsdFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXJjb2RlU2Nhbm5lciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICBFbmNvZGU6IHtcbiAgICAgICAgVEVYVF9UWVBFOiBzdHJpbmc7XG4gICAgICAgIEVNQUlMX1RZUEU6IHN0cmluZztcbiAgICAgICAgUEhPTkVfVFlQRTogc3RyaW5nO1xuICAgICAgICBTTVNfVFlQRTogc3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgYmFyY29kZSBzY2FubmVyLlxuICAgICAqIEBwYXJhbSB7QmFyY29kZVNjYW5uZXJPcHRpb25zfSBbb3B0aW9uc10gT3B0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBzY2FubmVyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHNjYW5uZXIgZGF0YSwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIHNjYW4ob3B0aW9ucz86IEJhcmNvZGVTY2FubmVyT3B0aW9ucyk6IFByb21pc2U8QmFyY29kZVNjYW5SZXN1bHQ+O1xuICAgIC8qKlxuICAgICAqIEVuY29kZXMgZGF0YSBpbnRvIGEgYmFyY29kZS5cbiAgICAgKiBOT1RFOiBub3Qgd2VsbCBzdXBwb3J0ZWQgb24gQW5kcm9pZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgZW5jb2RpbmdcbiAgICAgKiBAcGFyYW0ge2FueX0gZGF0YSBEYXRhIHRvIGVuY29kZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZW5jb2RlKHR5cGU6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxhbnk+O1xufVxuIl19